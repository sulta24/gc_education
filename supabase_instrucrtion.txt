


          
Сначала просмотрю файлы API и страницы «Менторы», чтобы описать поток данных.
        
            
toolName: search_codebase
            
status: success
          
query: Mentors.tsx mentors.ts supabase list mentors fetch api query
          
**Общий Поток**

- Страница `Mentors.tsx` загружается, вызывает `getMentors({ page, limit: 12 })` из `src/api/mentors.ts` и сохраняет данные в стейтах (`mentors`, `total`, `totalPages`, `currentPage`).
- Рендерит сетку карточек менторов, показывает пагинацию и фильтрует список по строке поиска без повторных запросов к БД.

**Загрузка Данных**

- Источник данных — Supabase (`src/lib/supabase.ts`) с `VITE_SUPABASE_URL` и `VITE_SUPABASE_SERVICE_ROLE_KEY`.
- Функция `getMentors`:
  - Считает общее количество записей через `.select('*', { count: 'exact', head: true })`.
  - Получает страницу данных через `.select('id, full_name, avatar_url, short_description, can_help_with, about_me, created_at, updated_at').order('created_at', { ascending: false }).range(from, to)`.
  - Возвращает объект `{ data, total, page, limit, totalPages }`.
- На карточке кликают по ментору → переход на `MentorProfile.tsx`, где используется `getMentorById(id)` с тем же набором полей.

**Какие Поля Подтягиваются**

- `id` — идентификатор.
- `full_name` — ФИО.
- `avatar_url` — ссылка на аватар (используется, иначе заглушка с инициалом).
- `short_description` — краткое описание (на карточке).
- `can_help_with` — список тем (используется для поиска и в профиле).
- `about_me` — подробное описание (используется в профиле).
- `created_at`, `updated_at` — временные метки (получаются, но на странице списка не отображаются).

**Пагинация**

- Размер страницы — `12` элементов (`ITEMS_PER_PAGE`).
- `currentPage` управляет диапазоном `.range(from, to)`:
  - `from = (page - 1) * limit`, `to = from + limit - 1`.
- `totalPages = Math.ceil(total / limit)`; используется компонент `Pagination`.

**Поиск и Фильтрация**

- Фильтрация клиентская, без запросов к БД:
  - Сравнение по `full_name`, `short_description` и любому элементу `can_help_with` (регистронезависимо, `includes` по подстроке).
- При вводе в поиск список заменяется на `filteredMentors`; пагинация скрывается.
- При изменении поиска страница сбрасывается на первую (`currentPage = 1`).

**Состояния UI**

- `loading` — показывает «Загрузка…».
- `error` — показывает сообщение об ошибке и пустой список.
- Пустой результат поиска — блок «Менторы не найдены».

**Навигация**

- Клик по карточке вызывает `navigate(`/mentor/${id}`)` и открывает профиль ментора (`MentorProfile.tsx`), где данные подтягиваются отдельно по `id`.

**Примечание по Безопасности**

- В проекте используется `VITE_SUPABASE_SERVICE_ROLE_KEY` на клиенте. Такой ключ имеет повышенные права и обычно хранится только на сервере; на фронтенде безопаснее использовать публичный ключ (`anon`). Если планируется прод, стоит пересмотреть способ доступа к БД.
        